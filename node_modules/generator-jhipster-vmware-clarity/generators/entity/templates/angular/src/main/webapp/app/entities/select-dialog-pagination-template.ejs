    <%= entityInstancePlural %>: I<%= entityAngularName %>[];
    error: any;
    success: any;
    eventSubscriber: Subscription;
    <%_ if (searchEngine === 'elasticsearch') { _%>
    currentSearch: string;
    <%_ } _%>
    <%_ if (databaseType !== 'cassandra') { _%>
    routeData: any;
    links: any;
    totalItems: any;
    queryCount: any;
    itemsPerPage: any;
    page: any;
    predicate: any;
    previousPage: any;
    reverse: any;
    // added for Clarity
    loading: any;
    searchDebounce: Subject<ClrDatagridStateInterface>;
    filters: any;
    sorters: any;
    @Input() callback: Function;
    @Input() selected: any;
    @Input() multiSelect: boolean;
    @Input() close: Function;
    <%_ } _%>
    private _opened: any;

    constructor(
        private <%= entityInstance %>Service: <%= entityAngularName %>Service,
        private parseLinks: JhiParseLinks,
        private jhiAlertService: JhiAlertService,
        <%_ if (fieldsContainBlob) { _%>
        private dataUtils: JhiDataUtils,
        <%_ } _%>
        private principal: Principal,
        private router: Router,
        private eventManager: JhiEventManager
    ) {
        // added for Clarity
        this.sorters = {
          id: ClrDatagridSortOrder.UNSORTED,
          <%_ for (idx in fields) { _%>
          <%= fields[idx].fieldName %>: ClrDatagridSortOrder.UNSORTED,
          <%_ } _%>
        };
        this.filters = {
          id: null,
          <%_ for (idx in fields) { _%>
          <%= fields[idx].fieldName %>: null,
          <%_ } _%>
        };

        <%_ if (databaseType !== 'cassandra') { _%>
        this.itemsPerPage = ITEMS_PER_PAGE;
        this.loading = true;
        this.searchDebounce = new Subject<ClrDatagridStateInterface>();
        this.searchDebounce.debounceTime(SEARCH_DEBOUNCE_TIME).subscribe(() => this.loadAll());
        <%_ } _%>
        this.selected = this.multiSelect ? this.selected :
            this.selected && this.selected.length > 0 ? this.selected[0] : null;
    }

    // added for Clarity
    refresh(state: ClrDatagridStateInterface) {
      // added grid sort
      this.predicate = state.sort ? state.sort.by : 'id';
      this.reverse = state.sort ? state.sort.reverse : true;
      // added grid filter
      this.currentSearch = null;
      if (state.filters) {
        this.currentSearch = '';
        state.filters.forEach(filter => {
          if (filter['value'] !== '') {
            switch (filter['property']) {
              <%_ for (idx in fields) { _%>
              case '<%= fields[idx].fieldName %>':
                this.currentSearch += `(${resolveFilter(filter)}) AND `;
                break;
              <%_ } _%>
              <%_ for (idx in relationships) { _%>
              case '<%=relationships[idx].relationshipName%>.<%=relationships[idx].otherEntityField%>':
                this.currentSearch += `(${resolveFilter(filter)}) AND `;
                break;
              <%_ } _%>
            }
          }
        });
        this.currentSearch += '*:*';
      }

      // fixed filter refresh debounce
      if (state.filters) {
        this.searchDebounce.next();
        return;
      }
      this.loadAll();
    }

    loadAll() {
        // added for Clarity
        this.loading = true;

        <%_ if (searchEngine === 'elasticsearch') { _%>
        if (this.currentSearch) {
            this.<%= entityInstance %>Service.search({
                page: this.page - 1,
                query: this.currentSearch,
                size: this.itemsPerPage,
                sort: this.sort()}).subscribe(
                    (res: HttpResponse<I<%= entityAngularName %>[]>) => this.paginate<%= entityClassPlural %>(res.body, res.headers),
                    (res: HttpErrorResponse) => this.onError(res.message)
                );
            return;
        }
        <%_ } _%>
        this.<%= entityInstance %>Service.query(<%_ if (databaseType !== 'cassandra') { _%>{
            page: this.page - 1,
            size: this.itemsPerPage,
            sort: this.sort()}<%_ } _%>).subscribe(
                (res: HttpResponse<I<%= entityAngularName %>[]>) => this.paginate<%= entityClassPlural %>(res.body, res.headers),
                (res: HttpErrorResponse) => this.onError(res.message)
        );
    }
    <%_ if (databaseType !== 'cassandra') { _%>
    loadPage(page: number) {
        if (page !== this.previousPage) {
            this.previousPage = page;
            this.loadAll();
        }
    }
    clear() {
        this.page = 0;
        <%_ if (searchEngine === 'elasticsearch') { _%>
        this.currentSearch = '';
        <%_ } _%>
        this.loadAll();
    }
    <%_ } _%>
