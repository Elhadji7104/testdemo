import { Component, Input, Output, EventEmitter } from '@angular/core';
import { Subject } from 'rxjs/Subject';
import { Observable } from 'rxjs/Observable';
import { ClrDatagridFilter, ClrDatagridFilterInterface } from '@clr/angular';
import { SelectFilterValue } from 'app/shared/util/filter-util';
import { Router } from '@angular/router';
import { <%= entityAngularName %>SelectDialogService } from 'app/entities/<%= microserviceName %>/<%= entityFileName %>/<%= entityFileName %>-select-dialog.service';
import { <%= entityAngularName %>Service } from 'app/entities/<%= microserviceName %>/<%= entityFileName %>/<%= entityFileName %>.service';
import { HttpErrorResponse, HttpResponse } from '@angular/common/http';
import { I<%= entityAngularName %> } from 'app/shared/model/<%= entityModelFileName %>.model';
import { JhiAlertService } from 'ng-jhipster';

@Component({
    selector: '<%= jhiPrefixDashed %>-<%= microserviceName%>-<%= entityFileName %>-filter',
    templateUrl: './<%= microserviceName%>-<%= entityFileName %>-filter.component.html',
    styleUrls: [
        './<%= microserviceName%>-<%= entityFileName %>-filter.component.scss'
    ]
})
export class <%= microserviceName.substr(0, 1).toUpperCase() + microserviceName.substr(1)%><%= entityAngularName %>FilterComponent implements ClrDatagridFilterInterface<any> {
    @Output('clrFilterValueChange') clrFilterValueChange = new EventEmitter();
    _changes = new Subject<any>();
    property: string;
    value: SelectFilterValue;
    selected: Array<I<%= entityAngularName %>>;

    constructor(public filterFn: ClrDatagridFilter,
                private router: Router,
                private jhiAlertService: JhiAlertService,
                private <%= entityInstance %>SelectDialogService: <%= entityAngularName %>SelectDialogService,
                private <%= entityInstance %>Service: <%= entityAngularName %>Service
                ) {
        this.filterFn.setFilter(this);
        this.value = new SelectFilterValue();
        this.selected = [];
    }

    public get changes(): Observable<any> {
        return this._changes.asObservable();
    }

    @Input('clrDgField')
    public set field(field: string) {
        if (typeof field === 'string') {
            this.property = field;
        }
    }

    @Input('clrFilterValue')
    public set clrFilterValue(filter: any) {
        if (filter && filter.value) {
            this.value = filter.value;
            if (filter.value.selected.length > 0) {
                let queryString = '';
                filter.value.selected.forEach(id => {
                    if (queryString === '') {
                        queryString += `id:${id}`;
                    } else {
                        queryString += ` OR id:${id}`;
                    }
                });
                this.<%= entityInstance %>Service.search({
                    page: 0,
                    query: queryString,
                    size: 100
                }).subscribe(
                    (res: HttpResponse<I<%= entityAngularName %>[]>) => this.selected = res.body,
                    (res: HttpErrorResponse) => this.onError(res.message)
                );
            }
        }
    }

    isActive(): boolean {
        return this.value && this.value.selected.length > 0;
    }

    accepts(item: any): boolean {
        if (this.selected && this.selected.length > 0) {
            for (let i = 0; i < this.selected.length; i++) {
                if (item[this.property].id === this.selected[i].id) {
                    return true;
                }
            }
            return false;
        }
        return true;
    }

    openSelectDialog() {
        this.<%= entityInstance %>SelectDialogService.open((selected: Array<I<%= entityAngularName %>>) => {
            const values = [];
            selected.forEach(item => {
               values.push(item.id);
            });
            this.value.selected = values;
            this.selected = selected;
            this._changes.next(true);
        }, this.selected, true);
    }

    removeAll() {
        this.selected = [];
        this.value.selected = [];
        this._changes.next(true);
    }

    remove(item: I<%= entityAngularName %>) {
        for (let i = 0; i < this.selected.length; i++) {
            if (item.id === this.selected[i].id) {
                this.selected.splice(i, 1);
                this.value.selected.splice(i, 1);
                break;
            }
        }
        this._changes.next(true);
    }

    private onError(errorMessage: string) {
        this.jhiAlertService.error(errorMessage, null, null);
    }
}
