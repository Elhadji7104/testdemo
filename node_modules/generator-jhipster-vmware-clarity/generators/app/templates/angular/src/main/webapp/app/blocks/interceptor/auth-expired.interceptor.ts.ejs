import { Injector } from '@angular/core';
import { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HttpErrorResponse } from '@angular/common/http';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/do';
<%_ if (['oauth2', 'jwt', 'uaa'].includes(authenticationType)) { _%>
    <%_ if (authenticationType === 'uaa') { _%>
import { Router } from '@angular/router';

import { Principal } from 'app/core/auth/principal.service';
    <%_ } _%>
import { LoginService } from 'app/core/login/login.service';
<%_ } _%>
<%_ if (['session', 'oauth2'].includes(authenticationType)) { _%>
    <%_ if (authenticationType === 'session') { _%>
import { AuthServerProvider } from 'app/core/auth/auth-session.service';
    <%_ } _%>
import { StateStorageService } from 'app/core/auth/state-storage.service';
<%_ } _%>

export class AuthExpiredInterceptor implements HttpInterceptor {

    constructor(
        <%_ if (['session', 'oauth2'].includes(authenticationType)) { _%>
        private stateStorageService: StateStorageService,
        <%_ } _%>
        private injector: Injector
    ) {}

<%_ if (authenticationType === 'jwt' || authenticationType === 'uaa') { _%>
    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
        return next.handle(request).do((event: HttpEvent<any>) => {}, (err: any) => {
            if (err instanceof HttpErrorResponse) {
                if (err.status === 401) {
<%_ if (authenticationType === 'jwt') { _%>
                    const loginService: LoginService = this.injector.get(LoginService);
                    loginService.logout();
<% } if (authenticationType === 'uaa') { %>
                    const principal = this.injector.get(Principal);

                    if (principal.isAuthenticated()) {
                        principal.authenticate(null);
                    } else {
                        const loginService: LoginService = this.injector.get(LoginService);
                        loginService.logout();
                        const router = this.injector.get(Router);
                        router.navigate(['/']);
                    }
<%_ } _%>
                }
            }
        });
    }
<%_ } else if (authenticationType === 'session' || authenticationType === 'oauth2') { _%>
    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
        return next.handle(request).do((event: HttpEvent<any>) => {}, (err: any) => {
            if (err instanceof HttpErrorResponse) {
                if (err.status === 401 && err.url && !err.url.includes('/api/account')) {
                    const destination = this.stateStorageService.getDestinationState();
                    if (destination !== null) {
                        const to = destination.destination;
                        const toParams = destination.params;
                        if (to.name === 'accessdenied') {
                            this.stateStorageService.storePreviousState(to.name, toParams);
                        }
                    } else {
                        this.stateStorageService.storeUrl('/');
                    }
<% if (authenticationType === 'session') { %>
                    const authServer: AuthServerProvider = this.injector.get(AuthServerProvider);
                    authServer.logout();
<% } else { %>
                    const loginService: LoginService = this.injector.get(LoginService);
                    loginService.login();
<% } %>
                }
            }
        });
    }
<%_ } _%>
}
