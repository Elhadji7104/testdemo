package <%=packageName%>.web.rest.client;

import <%=packageName%>.client.AuthorizedUserFeignClient;
import <%=packageName%>.web.rest.dto.<%= entityClass %>DTO;
<% if (pagination !== 'no') { %>
import <%=packageName%>.web.rest.util.PaginationUtil;<% } %>
<%_ if (dto === 'mapstruct') { _%>
import <%=packageName%>.service.dto.<%= entityClass %>DTO;
<%_ if (service === 'no') { _%>
import <%=packageName%>.service.mapper.<%= entityClass %>Mapper;
<%_ } } _%>
<%_ if (jpaMetamodelFiltering) {  _%>
import <%=packageName%>.web.rest.dto.<%= entityClass %>Criteria;
<%_ } _%>
import org.springframework.http.MediaType;
<%_ if (pagination !== 'no') { _%>
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
<%_ } _%>
<%_ if (reactiveRepositories) { _%>
import org.springframework.http.MediaType;
<%_ } _%>
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
<%_ if (reactiveRepositories) { _%>
import reactor.core.publisher.Flux;
<%_ } _%>

<%_ if (validation) { _%>
import javax.validation.Valid;
<%_ } _%>
<%_ const viaService = service !== 'no';
if (pagination === 'no' && dto === 'mapstruct' && !viaService && fieldsContainNoOwnerOneToOne === true) { _%>
import java.util.LinkedList;<% } %>
import java.util.List;
<% if (databaseType === 'cassandra') { %>
import java.util.UUID;<% } %><% if (!viaService && (searchEngine === 'elasticsearch' || fieldsContainNoOwnerOneToOne === true)) { %>
import java.util.stream.Collectors;<% } %><% if (searchEngine === 'elasticsearch' || fieldsContainNoOwnerOneToOne === true) { %>
import java.util.stream.StreamSupport;<% } %><% if (searchEngine === 'elasticsearch') { %>
import static org.elasticsearch.index.query.QueryBuilders.*;<% } %>

/**
 * Feign Client for managing <%= entityClass %>.
 */
@AuthorizedUserFeignClient(name = "<%= entityInstance %>", fallback = <%= microserviceName %><%= entityClass %>ClientFallback.class)
public interface <%= microserviceName %><%= entityClass %>Client {
    <%_
    const instanceType = entityClass + 'DTO';
    const instanceName = entityInstance + 'DTO';
    _%>

    /**
     * POST  /<%= entityApiUrl %> : Create a new <%= entityInstance %>.
     */
    @RequestMapping(value = "/<%= entityApiUrl %>", method = RequestMethod.POST,
        produces = MediaType.APPLICATION_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<<%= instanceType %>> create<%= entityClass %>(<% if (validation) { %>@Valid <% } %>@RequestBody <%= instanceType %> <%= instanceName %>);

    /**
     * PUT  /<%= entityApiUrl %> : Updates an existing <%= entityInstance %>.
     */
    @RequestMapping(value = "/<%= entityApiUrl %>", method = RequestMethod.PUT,
        produces = MediaType.APPLICATION_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<<%= instanceType %>> update<%= entityClass %>(<% if (validation) { %>@Valid <% } %>@RequestBody <%= instanceType %> <%= instanceName %>);

    /**
     * GET  /<%= entityApiUrl %> : get all the <%= entityInstancePlural %>.
     */
    @RequestMapping(value = "/<%= entityApiUrl %>", method = RequestMethod.GET,
        produces = MediaType.APPLICATION_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)<%_if (jpaMetamodelFiltering) {  %>
    public ResponseEntity<List<<%= instanceType %>>> getAll<%= entityClassPlural %>(@RequestParam("criteria") <%= entityClass %>Criteria criteria<% if (pagination != 'no') { %>, Pageable pageable<% } %>);
<% } else { %>
    <%_ if (pagination === 'no') { _%>
    public List<<%= instanceType %>> getAll<%= entityClassPlural %>(<% if (fieldsContainNoOwnerOneToOne) { %>@RequestParam(value = "filter", required = false) String filter<% } %><% if (fieldsContainOwnerManyToMany && fieldsContainNoOwnerOneToOne) { %>,<% } %><% if (fieldsContainOwnerManyToMany) { %>@RequestParam(required = false, defaultValue = "false") boolean eagerload<% }%>);
    <%_ } if (pagination !== 'no') { _%>
    public ResponseEntity<List<<%= instanceType %>>> getAll<%= entityClassPlural %>(Pageable pageable<% if (fieldsContainNoOwnerOneToOne) { %>, @RequestParam(value = "filter", required = false) String filter<% } %><% if (fieldsContainOwnerManyToMany) { %>, @RequestParam(value = "eagerload", required = false, defaultValue = "false") boolean eagerload<% } %>);
    <%_ } _%>
<%_ } _%>

    <%_ if (reactiveRepositories) { _%>
    /**
     * GET  /<%= entityApiUrl %> : get all the <%= entityInstancePlural %> as a stream.
     */
    @RequestMapping(value = "/<%= entityApiUrl %>", method = RequestMethod.GET,
        produces = MediaType.APPLICATION_STREAM_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)
    public Flux<<%= instanceType %>> getAll<%= entityClassPlural %>AsStream();
    <%_ } _%>
    /**
     * GET  /<%= entityApiUrl %>/:id : get the "id" <%= entityInstance %>.
     */
    @RequestMapping(value = "/<%= entityApiUrl %>/{id}", method = RequestMethod.GET,
        produces = MediaType.APPLICATION_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<<%= instanceType %>> get<%= entityClass %>(@PathVariable("id") <%= pkType %> id);

    /**
     * DELETE  /<%= entityApiUrl %>/:id : delete the "id" <%= entityInstance %>.
     */
    @RequestMapping(value = "/<%= entityApiUrl %>/{id}", method = RequestMethod.DELETE,
        produces = MediaType.APPLICATION_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<Void> delete<%= entityClass %>(@PathVariable("id") <%= pkType %> id);

    <% if (searchEngine === 'elasticsearch') { %>
    /**
     * SEARCH  /_search/<%= entityApiUrl %>?query=:query : search for the <%= entityInstance %> corresponding
     * to the query.
     */
    @RequestMapping(value = "/_search/<%= entityApiUrl %>", method = RequestMethod.GET,
        produces = MediaType.APPLICATION_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)
    <%_if (pagination === 'no') { %>
    public List<<%= instanceType %>> search<%= entityClassPlural %>(@RequestParam("query") String query);
    <% } if (pagination !== 'no') { %>
    public ResponseEntity<List<<%= instanceType %>>> search<%= entityClassPlural %>(@RequestParam("query") String query, Pageable pageable);
    <% } -%>
    <% } %>
}
