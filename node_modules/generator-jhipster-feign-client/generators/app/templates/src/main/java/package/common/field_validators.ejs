<%#	Returns a string of all validator annotations for the entity field. -%>
<%
const field = fields[idx];
let result = '';
if (field.fieldValidate === true) {
    const rules = field.fieldValidateRules;
    const validators = [];
    const MAX_VALUE = 2147483647;
    if (rules.includes('required')) {
        validators.push('@NotNull');
    }
    if (rules.includes('minlength') && !rules.includes('maxlength')) {
        validators.push('@Size(min = ' + field.fieldValidateRulesMinlength + ')');
    }
    if (rules.includes('maxlength') && !rules.includes('minlength')) {
        validators.push('@Size(max = ' + field.fieldValidateRulesMaxlength + ')');
    }
    if (rules.includes('minlength') && rules.includes('maxlength')) {
        validators.push('@Size(min = ' + field.fieldValidateRulesMinlength + ', max = ' + field.fieldValidateRulesMaxlength + ')');
    }
    if (rules.includes('minbytes') && !rules.includes('maxbytes')) {
        validators.push('@Size(min = ' + field.fieldValidateRulesMinbytes + ')');
    }
    if (rules.includes('maxbytes') && !rules.includes('minbytes')) {
        validators.push('@Size(max = ' + field.fieldValidateRulesMaxbytes + ')');
    }
    if (rules.includes('minbytes') && rules.includes('maxbytes')) {
        validators.push('@Size(min = ' + field.fieldValidateRulesMinbytes + ', max = ' + field.fieldValidateRulesMaxbytes + ')');
    }
    if (rules.includes('min')) {
        if (field.fieldType === 'Float' || field.fieldType === 'Double' || field.fieldType === 'BigDecimal') {
            validators.push('@DecimalMin(value = "' + field.fieldValidateRulesMin + '")');
        } else {
            const isLong = (field.fieldValidateRulesMin > MAX_VALUE || field.fieldType == 'Long') ? 'L' : '';
            validators.push('@Min(value = ' + field.fieldValidateRulesMin + isLong + ')');
        }
    }
    if (rules.includes('max')) {
        if (field.fieldType === 'Float' || field.fieldType === 'Double' || field.fieldType === 'BigDecimal') {
            validators.push('@DecimalMax(value = "' + field.fieldValidateRulesMax + '")');
        } else {
            const isLong = (field.fieldValidateRulesMax > MAX_VALUE || field.fieldType == 'Long') ? 'L' : '';
            validators.push('@Max(value = ' + field.fieldValidateRulesMax + isLong + ')');
        }
    }
    if (rules.includes('pattern')) {
        validators.push('@Pattern(regexp = "' + field.fieldValidateRulesPatternJava  + '")');
    }
    result =  validators.join('\n    ');
    result += '\n';
} -%>
<%- result -%>