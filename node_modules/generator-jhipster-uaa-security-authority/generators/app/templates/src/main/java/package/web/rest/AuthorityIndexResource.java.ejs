package <%=packageName%>.web.rest;

import com.codahale.metrics.annotation.Timed;
import <%=packageName%>.security.AuthoritiesConstants;
import <%=packageName%>.security.SecurityUtils;
import <%=packageName%>.web.rest.client.<%=uaaClassifyBaseName%>AuthorityClient;
import <%=packageName%>.web.rest.dto.AuthorityDTO;
import <%=packageName%>.web.rest.util.HeaderUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.annotation.Secured;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.lang.reflect.Field;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api")
public class AuthorityIndexResource {

    private final Logger log = LoggerFactory.getLogger(AuthorityIndexResource.class);

    private final <%=uaaClassifyBaseName%>AuthorityClient <%=uaaBaseName%>AuthorityClient;

    public AuthorityIndexResource(<%=uaaClassifyBaseName%>AuthorityClient <%=uaaBaseName%>AuthorityClient) {
        this.<%=uaaBaseName%>AuthorityClient = <%=uaaBaseName%>AuthorityClient;
    }

    @PostMapping("/authorities/index")
    @Timed
    @Secured(AuthoritiesConstants.ADMIN)
    public ResponseEntity<Void> reindexAll() {
        log.info("REST request to reindex Authorities by user : {}", SecurityUtils.getCurrentUserLogin());

        ResponseEntity<List<AuthorityDTO>> responseEntity = <%=uaaBaseName%>AuthorityClient.getAllAuthorities();
        List<AuthorityDTO> current = responseEntity.getBody();

        List<String> securityAuthorities = getSecurityAuthorities();

        if (current != null) {
            current.stream()
                .filter(currentItem -> currentItem.getName().startsWith(AuthoritiesConstants.<%=upperCaseBaseName%>))
                .forEach(currentItem -> {
                    if (securityAuthorities.stream()
                        .noneMatch(item -> item.equals(currentItem.getName()))) {
                        log.info("Removed redundancy authority {}", currentItem.getName());
                        <%=uaaBaseName%>AuthorityClient.deleteAuthority(currentItem.getName());
                    }
                });

            securityAuthorities
                .forEach(item -> {
                    if (current.stream()
                        .noneMatch(currentItem -> currentItem.getName().equals(item))) {
                        final AuthorityDTO authorityDTO = new AuthorityDTO();
                        authorityDTO.setName(item);
                        log.info("Added missing authority {}", authorityDTO.getName());
                        <%=uaaBaseName%>AuthorityClient.createAuthority(authorityDTO);
                    }
                });
        }

        return ResponseEntity.accepted()
            .headers(HeaderUtil.createAlert("authorities.reindex.accepted", null))
            .build();
    }

    private static List<String> getSecurityAuthorities() {
        Field[] fields = AuthoritiesConstants.class.getDeclaredFields();
        return Arrays.stream(fields)
            .filter(field -> field.getName().startsWith("<%=upperCaseBaseName%>"))
            .map(field -> {
                try {
                    return field.get(AuthoritiesConstants.class).toString();
                } catch (IllegalAccessException e) {
                    throw new IllegalArgumentException();
                }
            }).collect(Collectors.toList());
    }
}
