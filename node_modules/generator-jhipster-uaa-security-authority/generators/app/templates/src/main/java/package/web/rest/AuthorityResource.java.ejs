package <%=packageName%>.web.rest;

import com.codahale.metrics.annotation.Timed;
import io.github.jhipster.web.util.ResponseUtil;
import <%=packageName%>.domain.Authority;
import <%=packageName%>.repository.AuthorityRepository;
import <%=packageName%>.security.AuthoritiesConstants;
import <%=packageName%>.service.AuthorityService;
import <%=packageName%>.web.rest.errors.BadRequestAlertException;
import <%=packageName%>.web.rest.util.HeaderUtil;
import <%=packageName%>.web.rest.vm.ManagedUsersAuthorityVM;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.annotation.Secured;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.Optional;

/**
 * REST controller for managing the authorities.
 */
@RestController
@RequestMapping("/api")
public class AuthorityResource {

    private final Logger log = LoggerFactory.getLogger(AuthorityResource.class);

    private static final String ENTITY_NAME = "authority";

    private final AuthorityRepository authorityRepository;

    private final AuthorityService authorityService;

    public AuthorityResource(AuthorityRepository authorityRepository, AuthorityService authorityService) {
        this.authorityRepository = authorityRepository;
        this.authorityService = authorityService;
    }

    /**
     * POST  /authorities : Create a new authority.
     *
     * @param authority the authority to create
     * @return the ResponseEntity with status 201 (Created) and with body the new authority, or with status 400 (Bad Request) if the authority has already an ID
     * @throws URISyntaxException if the Location URI syntax is incorrect
     */
    @PostMapping("/authorities")
    @Timed
    @Secured(AuthoritiesConstants.ADMIN)
    public ResponseEntity<Authority> createAuthority(@Valid @RequestBody Authority authority) throws URISyntaxException {
        log.debug("REST request to save Authority : {}", authority);

        if (authorityRepository.findById(authority.getName()).isPresent()) {
            throw new BadRequestAlertException("A new authority already have an name", ENTITY_NAME, "idexists");
        }

        Authority result = authorityRepository.save(authority);

        return ResponseEntity.created(new URI("/api/authority/" + result.getName()))
            .headers(HeaderUtil.createEntityCreationAlert(ENTITY_NAME, result.getName()))
            .body(result);
    }

    /**
     * GET  /authorities : get all the authorities.
     *
     * @return the ResponseEntity with status 200 (OK) and the list of authorities in body
     */
    @GetMapping("/authorities")
    @Timed
    @Secured(AuthoritiesConstants.ADMIN)
    public ResponseEntity<List<Authority>> getAllAuthorities() {
        log.debug("REST request to get Authorities");
        List<Authority> entityList = authorityRepository.findAll();
        return ResponseEntity.ok().body(entityList);
    }

    /**
     * GET  /authorities/:id : get the "name" authority.
     *
     * @param name the name of the authority to retrieve
     * @return the ResponseEntity with status 200 (OK) and with body the authority, or with status 404 (Not Found)
     */
    @GetMapping("/authorities/{name}")
    @Timed
    @Secured(AuthoritiesConstants.ADMIN)
    public ResponseEntity<Authority> getAuthority(@PathVariable String name) {
        log.debug("REST request to get Authority : {}", name);
        Optional<Authority> authority = authorityRepository.findById(name);
        return ResponseUtil.wrapOrNotFound(authority);
    }

    /**
     * DELETE  /authorities/:id : delete the "name" authority.
     *
     * @param name the id of the authority to delete
     * @return the ResponseEntity with status 200 (OK)
     */
    @DeleteMapping("/authorities/{name}")
    @Timed
    @Secured(AuthoritiesConstants.ADMIN)
    public ResponseEntity<Void> deleteAuthority(@PathVariable String name) {
        log.debug("REST request to delete Authority : {}", name);
        authorityRepository.deleteById(name);
        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(ENTITY_NAME, name)).build();
    }

    /**
     * Modify users authorities
     *
     * @param managedUsersAuthorityVM the managed users authorities View Model
     */
    @PutMapping("/authorities/users")
    @Timed
    @Secured(AuthoritiesConstants.ADMIN)
    public ResponseEntity<Void> modifyUsersAuthorities(@Valid @RequestBody ManagedUsersAuthorityVM managedUsersAuthorityVM) {
        authorityService.modifyAuthorities(
            managedUsersAuthorityVM.getTargetUsers(),
            managedUsersAuthorityVM.getSourceAuthorities(),
            managedUsersAuthorityVM.getTargetAuthorities()
        );
        return ResponseEntity.ok().build();
    }
}
